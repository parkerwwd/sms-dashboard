-- Create daily_metrics table
CREATE TABLE IF NOT EXISTS daily_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE UNIQUE NOT NULL,
    sms_cost NUMERIC(10, 2) DEFAULT 0,
    revenue NUMERIC(10, 2) DEFAULT 0,
    profit NUMERIC(10, 2) GENERATED ALWAYS AS (revenue - sms_cost) STORED,
    margin NUMERIC(5, 4) GENERATED ALWAYS AS (
        CASE 
            WHEN revenue = 0 THEN 0 
            ELSE (revenue - sms_cost) / revenue 
        END
    ) STORED,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create sms_messages table
CREATE TABLE IF NOT EXISTS sms_messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    daily_id BIGINT REFERENCES daily_metrics(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    link_url TEXT,
    click_rate NUMERIC(5, 4) CHECK (click_rate >= 0 AND click_rate <= 1),
    num_sent INTEGER NOT NULL CHECK (num_sent >= 0),
    est_cost NUMERIC(10, 2) DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX idx_daily_metrics_date ON daily_metrics(date DESC);
CREATE INDEX idx_sms_messages_daily_id ON sms_messages(daily_id);

-- Create a view for easy access to daily metrics with message counts
CREATE VIEW daily_metrics_summary AS
SELECT 
    dm.id,
    dm.date,
    dm.revenue,
    dm.sms_cost,
    dm.profit,
    dm.margin,
    dm.created_at,
    COUNT(sm.id) AS message_count,
    SUM(sm.num_sent) AS total_messages_sent,
    AVG(sm.click_rate) AS avg_click_rate
FROM daily_metrics dm
LEFT JOIN sms_messages sm ON dm.id = sm.daily_id
GROUP BY dm.id, dm.date, dm.revenue, dm.sms_cost, dm.profit, dm.margin, dm.created_at; 